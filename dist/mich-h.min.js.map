{"version":3,"file":"mich-h.min.js","sources":["../index.js","../node_modules/mich-parse-selector/index.js"],"sourcesContent":["/*!\n * mich-h <https://github.com/tunnckoCore/mich-h>\n *\n * Copyright (c) Charlike Mike Reagent <@tunnckoCore> (https://i.am.charlike.online)\n * Released under the MIT license.\n */\n\n'use strict'\n\nvar parseSelector = require('mich-parse-selector')\n\nmodule.exports = function michH (selector) {\n  var isComponent = typeof selector === 'function'\n  var node = isComponent ? parseSelector() : parseSelector(selector)\n  var args = [].slice.call(arguments, 1)\n\n  function item (arg) {\n    if (arg) {\n      if (arg.map) {\n        while (arg.length) {\n          addChild(node.children, arg.shift())\n        }\n      } else if (typeof arg === 'object' && !isNode(arg)) {\n        for (var prop in arg) {\n          addProperty(node.properties, prop, arg[prop])\n        }\n      } else {\n        addChild(node.children, arg)\n      }\n    }\n  }\n\n  while (args.length) {\n    item(args.shift())\n  }\n\n  if (isComponent) {\n    return selector(node.properties, node.children)\n  }\n\n  return node\n}\n\nfunction isNode (val) {\n  return val.tagName &&\n    val.properties &&\n    typeof val.properties === 'object' &&\n    Array.isArray(val.children) &&\n    val.type === 'element'\n}\n\nfunction addChild (nodes, children) {\n  var type = typeof children\n  if (type === 'string' || type === 'number') {\n    children = {\n      type: 'text',\n      value: children + ''\n    }\n  }\n  nodes.push(children)\n}\n\nfunction addProperty (props, key, value) {\n  if (key === 'style' && value && typeof value === 'object') {\n    for (var prop in value) {\n      (props.style || {})[prop] = value[prop]\n    }\n  }\n  if (key === 'className') {\n    value = typeof value === 'string' ? value.split(' ') : value\n    props[key] = (props[key] || []).concat(value)\n  } else {\n    props[key] = value\n  }\n}\n","/*!\n * mich-parse-selector <https://github.com/tunnckoCore/mich-parse-selector>\n *\n * Copyright (c) Charlike Mike Reagent <@tunnckoCore> (https://i.am.charlike.online)\n * Copyright (c) Titus Wormer <tituswormer@gmail.com> (http://wooorm.com)\n * Released under the MIT license.\n */\n\n/**\n * > Parse a simple CSS selector like `p.foo#hero.btn-large.btn` into\n * a [HAST](https://github.com/syntax-tree/hast) node, which is a specification\n * for the Html (or Hypertext) Abstract Syntax Tree.\n * If \"tag name\" is omitted it defaults to `div`.\n *\n * **Example**\n *\n * ```js\n * const parseSelector = require('mich-parse-selector')\n *\n * const divNode = parseSelector('.bar')\n * const node = parseSelector('p.foo#hero.btn-large.btn')\n *\n * console.log(divNode)\n * // => {\n * //  type: 'element',\n * //  tagName: 'div',\n * //  properties: { className: [ 'bar' ] },\n * //  children: []\n * // }\n *\n * console.log(node)\n * // => {\n * //  type: 'element',\n * //  tagName: 'p',\n * //  properties: { id: 'hero', className: [ 'foo', 'btn-large', 'btn' ] },\n * //  children: []\n * // }\n * ```\n *\n * @name   michParseSelector\n * @param  {String} `selector` a css selector\n * @return {Object} a [HAST](https://github.com/syntax-tree/hast)-compliant node object\n * @api public\n */\n\nmodule.exports = function parse (selector) {\n  var type\n  var lastIndex\n\n  var index = 0\n  var className = []\n\n  var node = {\n    type: 'element',\n    tagName: 'div',\n    properties: {},\n    children: []\n  }\n\n  selector = selector || ''\n\n  while (index <= selector.length) {\n    var ch = selector[index++]\n\n    if (!ch || ch === '.' || ch === '#') {\n      var value = selector.slice(lastIndex, index - 1)\n\n      if (value) {\n        if (type === '.') {\n          className.push(value)\n        } else if (type === '#') {\n          node.properties.id = value\n        } else {\n          node.tagName = value\n        }\n      }\n\n      lastIndex = index\n      type = ch\n    }\n  }\n\n  if (className.length) {\n    node.properties.className = className\n  }\n\n  return node\n}\n"],"names":["isNode","val","tagName","properties","Array","isArray","children","type","addChild","nodes","value","push","addProperty","props","key","prop","style","split","concat","selector","lastIndex","index","className","node","length","ch","slice","id","parseSelector","require$$0","item","arg","map","shift","isComponent","args","call","arguments"],"mappings":"oKA2CA,QAASA,GAAQC,GACf,MAAOA,GAAIC,SACTD,EAAIE,YACsB,gBAAnBF,GAAIE,YACXC,MAAMC,QAAQJ,EAAIK,WACL,YAAbL,EAAIM,KAGR,QAASC,GAAUC,EAAOH,GACxB,GAAIC,SAAcD,EACL,YAATC,GAA8B,WAATA,IACvBD,GACEC,KAAM,OACNG,MAAOJ,EAAW,KAGtBG,EAAME,KAAKL,GAGb,QAASM,GAAaC,EAAOC,EAAKJ,GAChC,GAAY,UAARI,GAAmBJ,GAA0B,gBAAVA,GACrC,IAAK,GAAIK,KAAQL,IACdG,EAAMG,WAAaD,GAAQL,EAAMK,EAG1B,eAARD,GACFJ,EAAyB,gBAAVA,GAAqBA,EAAMO,MAAM,KAAOP,EACvDG,EAAMC,IAAQD,EAAMC,QAAYI,OAAOR,IAEvCG,EAAMC,GAAOJ,EC3BjB,MAAiB,SAAgBS,GAC/B,GAAIZ,GACAa,EAEAC,EAAQ,EACRC,KAEAC,GACFhB,KAAM,UACNL,QAAS,MACTC,cACAG,YAKF,KAFAa,EAAWA,GAAY,GAEhBE,GAASF,EAASK,QAAQ,CAC/B,GAAIC,GAAKN,EAASE,IAElB,KAAKI,GAAa,MAAPA,GAAqB,MAAPA,EAAY,CACnC,GAAIf,GAAQS,EAASO,MAAMN,EAAWC,EAAQ,EAE1CX,KACW,MAATH,EACFe,EAAUX,KAAKD,GACG,MAATH,EACTgB,EAAKpB,WAAWwB,GAAKjB,EAErBa,EAAKrB,QAAUQ,GAInBU,EAAYC,EACZd,EAAOkB,GAQX,MAJIH,GAAUE,SACZD,EAAKpB,WAAWmB,UAAYA,GAGvBC,GD7ELK,EAAgBC,IAEH,SAAgBV,GAK/B,QAASW,GAAMC,GACb,GAAIA,EACF,GAAIA,EAAIC,IACN,KAAOD,EAAIP,QACThB,EAASe,EAAKjB,SAAUyB,EAAIE,aAEzB,IAAmB,gBAARF,IAAqB/B,EAAO+B,GAK5CvB,EAASe,EAAKjB,SAAUyB,OAJxB,KAAK,GAAIhB,KAAQgB,GACfnB,EAAYW,EAAKpB,WAAYY,EAAMgB,EAAIhB,IAQ/C,IApBA,GAAImB,GAAkC,kBAAbf,GACrBI,EAAOW,EAAcN,IAAkBA,EAAcT,GACrDgB,KAAUT,MAAMU,KAAKC,UAAW,GAkB7BF,EAAKX,QACVM,EAAKK,EAAKF,QAGZ,OAAIC,GACKf,EAASI,EAAKpB,WAAYoB,EAAKjB,UAGjCiB"}