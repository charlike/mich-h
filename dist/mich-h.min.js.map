{"version":3,"file":"mich-h.min.js","sources":["../src/index.js","../node_modules/mich-parse-selector/index.js"],"sourcesContent":["/*!\n * mich-h <https://github.com/tunnckoCore/mich-h>\n *\n * Copyright (c) Charlike Mike Reagent <@tunnckoCore> (https://i.am.charlike.online)\n * Released under the MIT license.\n */\n\nimport parseSelector from 'mich-parse-selector'\n\nexport default function michH (selector) {\n  var isComponent = typeof selector === 'function'\n  var node = isComponent ? parseSelector() : parseSelector(selector)\n  var args = [].slice.call(arguments, 1)\n\n  function item (arg) {\n    if (arg) {\n      if (arg.map) {\n        while (arg.length) {\n          addChild(node.children, arg.shift())\n        }\n      } else if (typeof arg === 'object' && !isNode(arg)) {\n        for (var prop in arg) {\n          addProperty(node.properties, prop, arg[prop])\n        }\n      } else {\n        addChild(node.children, arg)\n      }\n    }\n  }\n\n  while (args.length) {\n    item(args.shift())\n  }\n\n  if (isComponent) {\n    return selector(node.properties, node.children)\n  }\n\n  return node\n}\n\nfunction isNode (val) {\n  return val.tagName &&\n    val.properties &&\n    typeof val.properties === 'object' &&\n    Array.isArray(val.children) &&\n    val.type === 'element'\n}\n\nfunction addChild (nodes, children) {\n  var type = typeof children\n  if (type === 'string' || type === 'number') {\n    children = {\n      type: 'text',\n      value: children + ''\n    }\n  }\n  nodes.push(children)\n}\n\nfunction addProperty (props, key, value) {\n  if (key === 'style' && value && typeof value === 'object') {\n    for (var prop in value) {\n      (props.style || {})[prop] = value[prop]\n    }\n  }\n  if (key === 'className') {\n    value = typeof value === 'string' ? value.split(' ') : value\n    props[key] = (props[key] || []).concat(value)\n  } else {\n    props[key] = value\n  }\n}\n\n\n\n\n\n","/*!\n * mich-parse-selector <https://github.com/tunnckoCore/mich-parse-selector>\n *\n * Copyright (c) Charlike Mike Reagent <@tunnckoCore> (https://i.am.charlike.online)\n * Copyright (c) Titus Wormer <tituswormer@gmail.com> (http://wooorm.com)\n * Released under the MIT license.\n */\n\n/**\n * > Parse a simple CSS selector like `p.foo#hero.btn-large.btn` into\n * a [HAST](https://github.com/syntax-tree/hast) node, which is a specification\n * for the Html (or Hypertext) Abstract Syntax Tree.\n * If \"tag name\" is omitted it defaults to `div`.\n *\n * **Example**\n *\n * ```js\n * const parseSelector = require('mich-parse-selector')\n *\n * const divNode = parseSelector('.bar')\n * const node = parseSelector('p.foo#hero.btn-large.btn')\n *\n * console.log(divNode)\n * // => {\n * //  type: 'element',\n * //  tagName: 'div',\n * //  properties: { className: [ 'bar' ] },\n * //  children: []\n * // }\n *\n * console.log(node)\n * // => {\n * //  type: 'element',\n * //  tagName: 'p',\n * //  properties: { id: 'hero', className: [ 'foo', 'btn-large', 'btn' ] },\n * //  children: []\n * // }\n * ```\n *\n * @name   michParseSelector\n * @param  {String} `selector` a css selector\n * @return {Object} a [HAST](https://github.com/syntax-tree/hast)-compliant node object\n * @api public\n */\n\nmodule.exports = function parse (selector) {\n  var type\n  var lastIndex\n\n  var index = 0\n  var className = []\n\n  var node = {\n    type: 'element',\n    tagName: 'div',\n    properties: {},\n    children: []\n  }\n\n  selector = selector || ''\n\n  while (index <= selector.length) {\n    var ch = selector[index++]\n\n    if (!ch || ch === '.' || ch === '#') {\n      var value = selector.slice(lastIndex, index - 1)\n\n      if (value) {\n        if (type === '.') {\n          className.push(value)\n        } else if (type === '#') {\n          node.properties.id = value\n        } else {\n          node.tagName = value\n        }\n      }\n\n      lastIndex = index\n      type = ch\n    }\n  }\n\n  if (className.length) {\n    node.properties.className = className\n  }\n\n  return node\n}\n"],"names":["michH","selector","item","arg","map","length","addChild","node","children","shift","isNode","prop","addProperty","properties","isComponent","parseSelector","args","slice","call","arguments","val","tagName","Array","isArray","type","nodes","value","push","props","key","style","split","concat","lastIndex","index","className","ch","id"],"mappings":"oKAOA,QAEwBA,GAAOC,GAK7B,QAASC,GAAMC,GACb,GAAIA,EACF,GAAIA,EAAIC,IACN,KAAOD,EAAIE,QACTC,EAASC,EAAKC,SAAUL,EAAIM,aAEzB,IAAmB,gBAARN,IAAqBO,EAAOP,GAK5CG,EAASC,EAAKC,SAAUL,OAJxB,KAAK,GAAIQ,KAAQR,GACfS,EAAYL,EAAKM,WAAYF,EAAMR,EAAIQ,IAQ/C,IApBA,GAAIG,GAAkC,kBAAbb,GACrBM,EAAOO,EAAcC,IAAkBA,EAAcd,GACrDe,KAAUC,MAAMC,KAAKC,UAAW,GAkB7BH,EAAKX,QACVH,EAAKc,EAAKP,QAGZ,OAAIK,GACKb,EAASM,EAAKM,WAAYN,EAAKC,UAGjCD,EAGT,QAASG,GAAQU,GACf,MAAOA,GAAIC,SACTD,EAAIP,YACsB,gBAAnBO,GAAIP,YACXS,MAAMC,QAAQH,EAAIZ,WACL,YAAbY,EAAII,KAGR,QAASlB,GAAUmB,EAAOjB,GACxB,GAAIgB,SAAchB,EACL,YAATgB,GAA8B,WAATA,IACvBhB,GACEgB,KAAM,OACNE,MAAOlB,EAAW,KAGtBiB,EAAME,KAAKnB,GAGb,QAASI,GAAagB,EAAOC,EAAKH,GAChC,GAAY,UAARG,GAAmBH,GAA0B,gBAAVA,GACrC,IAAK,GAAIf,KAAQe,IACdE,EAAME,WAAanB,GAAQe,EAAMf,EAG1B,eAARkB,GACFH,EAAyB,gBAAVA,GAAqBA,EAAMK,MAAM,KAAOL,EACvDE,EAAMC,IAAQD,EAAMC,QAAYG,OAAON,IAEvCE,EAAMC,GAAOH,ECzBjB,MAAiB,SAAgBzB,GAC/B,GAAIuB,GACAS,EAEAC,EAAQ,EACRC,KAEA5B,GACFiB,KAAM,UACNH,QAAS,MACTR,cACAL,YAKF,KAFAP,EAAWA,GAAY,GAEhBiC,GAASjC,EAASI,QAAQ,CAC/B,GAAI+B,GAAKnC,EAASiC,IAElB,KAAKE,GAAa,MAAPA,GAAqB,MAAPA,EAAY,CACnC,GAAIV,GAAQzB,EAASgB,MAAMgB,EAAWC,EAAQ,EAE1CR,KACW,MAATF,EACFW,EAAUR,KAAKD,GACG,MAATF,EACTjB,EAAKM,WAAWwB,GAAKX,EAErBnB,EAAKc,QAAUK,GAInBO,EAAYC,EACZV,EAAOY,GAQX,MAJID,GAAU9B,SACZE,EAAKM,WAAWsB,UAAYA,GAGvB5B"}